lex load {
    use primitives

    import obj Int8  from primitives
    import obj Int16 from primitives
    import obj Int32 from primitives
    import obj Int64 from primitives

    import obj UInt8  from primitives
    import obj UInt16 from primitives
    import obj UInt32 from primitives
    import obj UInt64 from primitives
}

ld load() {
    obj NULL
    obj BH = boothash

    obj info = create BH
    obj subinfo = create BH
    bindkey info, "array", subinfo

    obj exports = create BH

    do {
        obj type = newtype NULL, "VMArray"
        bindkey subinfo, "type", Int8
        composetype type, info
        bindkey exports, "ArrayInt8", type
    }

    do {
        obj type = newtype NULL, "VMArray"
        bindkey subinfo, "type", Int16
        composetype type, info
        bindkey exports, "ArrayInt16", type
    }

    do {
        obj type = newtype NULL, "VMArray"
        bindkey subinfo, "type", Int32
        composetype type, info
        bindkey exports, "ArrayInt32", type
    }

    do {
        obj type = newtype NULL, "VMArray"
        bindkey subinfo, "type", Int64
        composetype type, info
        bindkey exports, "ArrayInt64", type
    }

    do {
        obj type = newtype NULL, "VMArray"
        bindkey subinfo, "type", UInt8
        composetype type, info
        bindkey exports, "ArrayUInt8", type
    }

    do {
        obj type = newtype NULL, "VMArray"
        bindkey subinfo, "type", UInt16
        composetype type, info
        bindkey exports, "ArrayUInt16", type
    }

    do {
        obj type = newtype NULL, "VMArray"
        bindkey subinfo, "type", UInt32
        composetype type, info
        bindkey exports, "ArrayUInt32", type
    }

    do {
        obj type = newtype NULL, "VMArray"
        bindkey subinfo, "type", UInt64
        composetype type, info
        bindkey exports, "ArrayUInt64", type
    }

    bindcurhllsym "arrays", exports
}
